要件定義書

■新人研修開発部課題（2020/12～）

  OCSP問題を抱えているJPRS G3証明書が外部Webサイトに残っていないか
  調査したい。これを実現するシステムを構築せよ。

   第1部：# 2020年12月
   (1) 仕様に関する口頭説明を受け、手順（要件含む）をメモに作成せよ


TODO：
　本日の口頭説明に関するメモ（要件、作業の実施手順をまとめたもの。
　日本語による文章でOK）を各自がメールによって提出する。

　形式：	添付ファイル(.txtまたは.pdfを想定)
　提出先：	kentaro@jprs.co.jp
　期限：	2020-12-11(Fri) 22:00

仕様に関する補足：
　・ワイルドカード(*)またはダブルアドレスオプションの場合は
　　{ドメイン名}、www.{ドメイン名}
　　の２つをチェックすること
　・メール本文のサマリー記載とログファイル添付は必須、DBを任意の時点で
　　検索できるようにすることは任意
　　※但し、何らかの形で「指定事業者ごとのチェック結果」は依頼者側の高い
　　　スキルを要求せずに提供してほしい


A.毎日朝8:00から定期実行を行い、開発部宛てに統計データとログファイルを送信
  件名: ■G3証明書監視■ 通知 2020**** 残存G3証明書統計情報 reg-rdb31.tyo.jprs.co.
  内容: 統計情報(検索対象詳細、検索件数、G3残存件数、G4件数、他社発行件数、各指定事業者ごとの件数)
  添付ファイル: 送信日時点のログファイル（sslcert-G3.log.2020-**-**)

  サーバにもログファイルを保存し、確認できるように
  ログファイルはwwwのありなしで分けて記載
  CN,OU,指定事業者( depth=1 ?)、発行日、失効日を最低限出力
  G3、G4、他社発行、指定事業者ごとは不要（grepで検索してもらう）
  メール送信時に、統計情報としてgrepの結果を記載(検索失敗した証明書を記載する？)


B.差分実行
  前日までにG3でないと判断された証明書は検索対象から除く
  DB上でフラグを設定し、G3でないと判断された場合にG4フラグ、他社発行フラグ、エラーフラグを立てる（単一カラムで1,2,3としていかも）
  


3.エラーコードへの対応
  


1.業務要件の定義
1-1.業務概要
1-2.規模
1-3.時期・時間
1-4.場所
1-5.管理すべき指標
1-6.システム化範囲

2.機能要件の定義
2-1.システム機能要件
2-2.画面要件
2-3.帳票要件
2-4.情報・データ要件
2-5.外部インターフェース要件



++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
                                     内部設計
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

**DB
カラムの種類：CN, OU, 指定事業者名, 発行日, 失効日, 判定フラグ(G3 & エラー/G4/他社)
...ワイルドカードの有無はCNに含められない？
   含められないなら分類メソッド（opensslコマンド）実行時に分類するしかない
...指定事業者は何種類あるのかによって考える（頭文字で登録、正式名称、ほかで使っているような名前がある？）

どんなデータを受け取るか分からないが、もしCNしか受け取らないのならこの時点で
opensslコマンドを使用して情報取得するようなメソッドが必要

...depth:1での指定事業者名をデリミタなどを利用して取得
...JPDirect案件だとどうなる？

例１：www.yahoo.co.jp
[asano@off-cpu08 ~]$ openssl s_client -connect www.yahoo.co.jp:443
CONNECTED(00000003)
depth=3 C = JP, O = SECOM Trust.net, OU = Security Communication RootCA1
verify return:1
depth=2 C = JP, O = "SECOM Trust Systems CO.,LTD.", OU = Security Communication RootCA2
verify return:1
depth=1 C = JP, O = "Cybertrust Japan Co., Ltd.", CN = Cybertrust Japan SureServer CA G4
verify return:1
depth=0 C = JP, ST = Tokyo, L = Chiyoda-ku, O = Yahoo Japan Corporation, CN = edge01.yahoo.co.jp
verify return:1

例２：yahoo.co.jp
[asano@off-cpu08 ~]$ openssl s_client -connect yahoo.co.jp:443
CONNECTED(00000003)
depth=3 C = JP, O = SECOM Trust.net, OU = Security Communication RootCA1
verify return:1
depth=2 C = JP, O = "SECOM Trust Systems CO.,LTD.", OU = Security Communication RootCA2
verify return:1
depth=1 C = JP, O = "Cybertrust Japan Co., Ltd.", CN = Cybertrust Japan SureServer CA G4
verify return:1
depth=0 C = JP, ST = Tokyo, L = Chiyoda-ku, O = Yahoo Japan Corporation, CN = edge01.yahoo.co.jp
verify return:1

**分類メソッド
G3 ＆ エラーフラグが立っているレコードのみをDBから呼び出し

G3の場合（openssl -> デリミタをカンマとして「JPRS G3」を抽出） -> カウント＆フラグそのまま
G4の場合（openssl -> デリミタをカンマとして「JPRS G4」を抽出） -> カウント＆フラグをG4に更新
他社発行の場合（openssl -> 上記条件以外） -> カウント＆フラグを他社に更新
エラー（openssl -> エラーでcatch句） -> カウント＆フラグをそのまま
...更新は1個ずつ？それともバッチ処理でDB更新？
これを1秒のディレイをかけて1件1件実行
...カウントよりArrayList更新処理のほうがいいかも

さらにワイルドカード、ダブルオプションを分けるメソッドが必要
{ドメイン名}、www.{ドメイン名}で場合分け
...各CNごとにその場合分けを行う必要がある？それとも事前にわかる（DBにインサートできる）のか
   DBに事前登録できるなら場合分け必要なし

加えて、指定事業者別にカウント
...指定事業者がどれだけいるのかわからないのでどう表示するか未定
この一覧はログファイルには必要ないので、カウント変数を使用

finally句でログファイル出力（sslcert-G3.log.2020-**-**)


（もしくは、ログファイル作成後にgrep処理 -> カウントをすると差分検索時のArrayList分メモリ領域が節約可能？
...微妙な気がする


**メールメソッド
ソケットを利用してメール作成 or javaxmailライブラリから引っ張ってくる？
作成したArrayListを使ってメール作成

  開発部宛てに統計データとログファイルを送信
  件名: ■G3証明書監視■ 通知 2020**** 残存G3証明書統計情報 reg-rdb31.tyo.jprs.co.
  内容: 統計情報(検索対象詳細、検索件数、G3残存件数、G4件数、他社発行件数、各指定事業者ごとの残存件数)
  添付ファイル: 送信日時点のログファイル（sslcert-G3.log.2020-**-**)

毎日0:00から定期実行（cron）
...前日比、初日比があっても面白いかも


**全数検査メソッド
フラグに関係なくすべてのレコードを対象に検索
あとはArrayList更新してって形


**過去ログ参照
余裕があれば実装
なくても開発部員ならログファイルを直接操作すればいい
Servletで実装
プルダウンで日付選択すると対象日時点の統計情報・詳細情報の表示
ログファイルの内容もそのまま表示
JPRS社員共通のアカウントログインを行えるようにすればいい
Spring boot & Tymeleaf で実装したい
